<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.jenkins-ci.plugins</groupId>
	<artifactId>priority-plugin</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>hpi</packaging>

	<properties>
		<jenkins.version>1.464-SNAPSHOT</jenkins.version>
		<!-- <jenkins.version>1.409</jenkins.version> -->
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.jenkins-ci.main</groupId>
			<artifactId>jenkins-war</artifactId>
			<type>war</type>
			<version>${jenkins.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jenkins-ci.main</groupId>
			<artifactId>jenkins-core</artifactId>
			<version>${jenkins.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jenkins-ci.main</groupId>
			<artifactId>jenkins-test-harness</artifactId>
			<version>${jenkins.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.4</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<build>
		<!--
			Since new versions need to overwrite old versions, it's better
			not to have version number in the .hpi file name.
		-->
		<finalName>${project.artifactId}</finalName>
		<!--
			I don't really understand how this works, but it makes Maven recognizes
			<packaging>hpi</packaging> defined in maven-hpi-plugin.

			<extensions>true</extensions> is apparently needed to have Maven read
			the plugin's Plexus component file.
		-->
		<defaultGoal>package</defaultGoal>
		<plugins>
			<plugin>
				<groupId>org.jenkins-ci.tools</groupId>
				<artifactId>maven-hpi-plugin</artifactId>
				<version>1.67</version>
				<extensions>true</extensions>
				<configuration>
					<showDeprecation>true</showDeprecation>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.kohsuke.stapler</groupId>
				<artifactId>maven-stapler-plugin</artifactId>
				<!-- version specified in parent pom -->
				<extensions>true</extensions>
			</plugin>
			<plugin>
				<artifactId>maven-release-plugin</artifactId>
				<!-- version specified in parent pom -->
				<configuration>
					<goals>deploy</goals>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jvnet.localizer</groupId>
				<artifactId>maven-localizer-plugin</artifactId>
				<!-- version specified in parent pom -->
				<executions>
					<execution>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<fileMask>Messages.properties</fileMask>
							<outputDirectory>target/generated-sources/localizer</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-javadoc-plugin</artifactId>
				<!-- version specified in parent pom -->
			</plugin>
			<plugin>
				<groupId>org.codehaus.groovy.maven</groupId>
				<artifactId>gmaven-plugin</artifactId>
				<version>1.0-rc-5</version>
				<executions>
					<execution>
						<id>test-in-groovy</id>
						<!-- allow tests written in Groovy -->
						<goals>
							<goal>generateTestStubs</goal>
							<goal>testCompile</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>ant</groupId>
						<artifactId>ant</artifactId>
						<version>1.6.5</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<systemProperties>
						<property>
							<name>hudson.udp</name>
							<value>33849</value>
						</property>
					</systemProperties>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.cloudbees</groupId>
				<artifactId>maven-license-plugin</artifactId>
				<version>1.1</version>
				<executions>
					<execution>
						<goals>
							<goal>process</goal>
						</goals>
						<phase>compile</phase>
						<configuration>
							<!--requireCompleteLicenseInfo>true</requireCompleteLicenseInfo -->
							<generateLicenseXml>target/${project.artifactId}/WEB-INF/licenses.xml</generateLicenseXml>
							<inlineScript><![CDATA[
                filter {
                    def plugins = [] as Set
                    
                    // collect all Jenkins plugins
                    models.entrySet().each { e ->
                        if (e.value.packaging=="hpi")
                            plugins.add(e.key.id)
                    }
                    
                    // filter out dependencies that don't belong to this plugin
                    models.entrySet().removeAll(models.entrySet().findAll { e ->
                        def a = e.key;
                        
                        if (a.dependencyTrail.size()>0 && plugins.contains(a.dependencyTrail[1]))
                            return true; // ignore transitive dependencies through other plugins

                        // if the dependency goes through jenkins core, we don't need to bundle it in the war
                        // because jenkins-core comes in the <provided> scope, I think this is a bug in Maven that it puts such
                        // dependencies into the artifact list.
                        if (a.dependencyTrail.find { trail -> trail.contains(":hudson-core:") || trail.contains(":jenkins-core:") })
                            return true;
                            
                        return false;
                    })
                }              
              ]]></inlineScript>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<!-- get every artifact through maven.glassfish.org, which proxies all the artifacts that we need -->
	<repositories>
		<repository>
			<id>m.g.o-public</id>
			<url>http://maven.glassfish.org/content/groups/public/</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>m.g.o-public</id>
			<url>http://maven.glassfish.org/content/groups/public/</url>
		</pluginRepository>
	</pluginRepositories>
</project>
